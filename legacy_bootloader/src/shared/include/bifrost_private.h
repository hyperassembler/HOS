/*-------------------------------------------------------
 |
 |  bifrost_private.h
 |
 |  Master Bifrost header (private)
 |
 |--------------------------------------------------------
 |
 |      Copyright ( C ) 2011  Microsoft Corp.
 |      All Rights Reserved
 |      Confidential and Proprietary
 |
 |--------------------------------------------------------
 */

#ifndef _BIFROST_PRIVATE_H
#define _BIFROST_PRIVATE_H

#include "bifrost.h"
#include "bifrost_driver.h"


//
// Project-specific hooks
//
extern void sys_postParam_hook();
extern void system_td_preloop();
extern void system_td_periodic();
extern void system_td_postloop();
extern BOOL sys_td_reboot_condition_hook(UINT32 coreNum);

//
// Retrieve time (project specific)
//
extern UINT64 sys_getTime();

//
// Heap functions (project specific)
//
extern HW_HEAP_TYPE sys_mapHeapType(HW_HEAP_TYPE type);
extern HW_HEAP_BLOCK sys_getHeapBlockID(HW_HEAP_TYPE type);
extern void* sys_translateAllocAddr(HW_HEAP_TYPE type, void* addr);
extern void* sys_untranslateAllocAddr(HW_HEAP_TYPE type, void* addr);


//
// Platform-specific functions
//
extern void plat_post(HW_STATUSCODE code, UINT32 testID);
extern int plat_puts( const char* buffer, int str_length );

//
// Testslave interrupt functions
//
extern BOOL ts_int_handlerEntry(HW_INT_VECTOR vector);
extern HW_RESULT ts_int_init( void );
extern void ts_int_vectorMaskSet(HW_INT_VECTOR interrupt, HW_INT_VECTOR_MASK * mask);
extern void ts_int_vectorMaskClear(HW_INT_VECTOR interrupt, HW_INT_VECTOR_MASK * mask);
extern BOOL ts_int_querySource(HW_INT_VECTOR* interrupt);
extern HW_INT_VECTOR_MASK ts_int_queryNonpreemptiveInterrupts();
extern void ts_int_handleNonpreemptiveInterrupts(); 

//
// Testslave exception functions
//
extern BOOL ts_exc_handlerEntry(HW_EXC_VECTOR vector);
extern HW_RESULT ts_exc_init();
extern void ts_exc_vectorMaskSet(HW_EXC_VECTOR exception, HW_EXC_VECTOR_MASK * mask);
extern void ts_exc_vectorMaskClear(HW_EXC_VECTOR exception, HW_EXC_VECTOR_MASK * mask);
extern HW_EXC_VECTOR_MASK ts_exc_queryNonpreemptiveExceptions();
extern void ts_exc_handleNonpreemptiveExceptions();

//
// Testslave poll functions
//
extern void ts_poll();

//
// Testslave perf counter functions
//
extern VOID ts_init_perf_counters(UINT32 test_num);

//
// Testslave function for setting test context
//
extern VOID ts_set_test_index(UINT32 test_idx);

//
// Testslave function for calling runTest_* - may be implemented differently per architecture/platform
//
extern UINT32 ts_arch_startNextIteration(HW_RUN_FUNC* prunTest, UINT32 iteration, UINT32 testIdx, VOID* curTestRegs);
extern UINT32 ts_arch_runIdleThread(VOID (*prunTest)(), VOID* curTestRegs);
extern UINT32 ts_arch_enter_init_cleanup_test(HW_FUNC* prunTest, UINT32 testIdx);
extern UINT32 ts_arch_resume_test(VOID* curTestRegs, VOID *targetTestRegs);
extern VOID ts_arch_resume_kernel(VOID* testRegs, VOID *kernelRegs);
extern UINT32 ts_arch_start_thread(void* old_regs, void * proc, void* stack, void* args);
extern UINT32 ts_arch_resume_thread(void *curTestRegs, void *targetTestRegs);
//
// Testslave print functions
//
extern void ts_copyToPrintBuffer( HW_PRINTF_BUFFER* buffer, BOOL write_null, const char* str, int str_length);
extern BOOL verbosity_enabled(HW_PRINT_TYPE print_type);

//
// Path name functions
//
extern UINT32 ts_getFuncIndexFromPathID(HW_PATHID pathID);
extern HW_PATHID hw_getPathIDFromPathName(const char *testName);

extern void alignAllocationWithName(PTR_FIELD * size, 
                                    PTR_FIELD * pattern, 
                                    PTR_FIELD * mask,
                                    PTR_FIELD alignValue,
                                    const char * caller,
                                    const char * description);

#define alignAllocation(size, pattern, mask, alignValue, description) alignAllocationWithName(size, pattern, mask, alignValue, __func__, description)

// Table of autogenerated core archtypes
extern HW_ARCHTYPE hw_archTypeList[HW_PROC_CNT];

// Table of precalculated CRC byte values
extern UINT32 crc_vals[256];

//
extern HW_ALLOC_TRACKER* __bf_kernelHW_ALLOC_TRACKER_pointers[];
extern HW_EVENT_LOG* __bf_kernelHW_EVENT_LOG_pointers[];
extern HW_TS_TESTDATA* __bf_kernelHW_TS_TESTDATA_pointers[];
extern HW_TS_PUBLIC_TESTDATA* __bf_kernelHW_TS_PUBLIC_TESTDATA_pointers[];

//
// Print build information from external file
//
extern void print_extern_build_info();


#endif

