/*-------------------------------------------------------
 |
 |      bifrost_system_constants.h
 |
 |      Contains project-specific Bifrost information,
 |      such as memory map and memory types, which are
 |      shared among all archtypes.
 |
 |--------------------------------------------------------
 |
 |      Copyright ( C ) 2016  Microsoft Corp.
 |      All Rights Reserved
 |      Confidential and Proprietary
 |
 |--------------------------------------------------------
 */

#ifndef _BIFROST_SYSTEM_CONSTANTS_H
#define _BIFROST_SYSTEM_CONSTANTS_H

// System communication struct definition
typedef struct {
    uint32_t none; // Currently no struct members
} __attribute__ ((packed)) HW_SYSCOM;

//
// Nodes
//
typedef enum
{
    // Autogenerated node masks
    HW_NODE_MASK_AUTO,
} HW_NODE_MASK;

//
// Memory Types
//
typedef enum
{
    HW_MEM_TYPE_SRAM,
    HW_MEM_TYPE_SRAM_UC,
    HW_MEM_TYPE_DRAM,
    HW_MEM_TYPE_DRAM_UC,
    HW_MEM_TYPE_HOSTMEM,
    HW_MEM_TYPE_HOSTMEM_UC,
    HW_MEM_TYPE_TCM,
    HW_MEM_TYPE_INVALID = -1,
} HW_MEM_TYPE;

//
// System memory map (all physical addresses)
//
#define HW_ADDRESS_START                (0x0)
// 40 bit address space
#define HW_ADDRESS_END                  (0x10000000000ll)

//
// Bifrost internal structures reside at the
// the 0x41020000-0x41900000 address range.
//
#define BIFROST_MEM_BASE                (&hw_bifrostSystemStruct)

#define BIFROST_MEM_SIZE                (roundUpToMultipleUnsigned(HW_SYS_SEMA_SIZE + HW_SYS_CONFIG_SIZE + HW_SYS_TSVAR_SIZE + HW_SYS_SYSCOM_SIZE, HW_PAGE_SIZE_4_KB))
#define HW_SYS_CONFIG_SIZE              (0x00004000)
#define HW_SYS_TSVAR_SIZE               (HW_PROC_CNT * sizeof(HW_TESTSLAVE_VARS))
#define HW_SYS_SYSCOM_SIZE              (0x00000040)

// Offsets from BIFROST_MEM_BASE
#define HW_SYS_CONFIG_BASE              (0x00000000)
#define HW_SYS_TSVAR_BASE               (roundUpToMultipleUnsigned(HW_SYS_CONFIG_BASE + HW_SYS_CONFIG_SIZE, HW_PAGE_SIZE_4_KB))
#define HW_SYS_SYSCOM_BASE              (HW_SYS_TSVAR_BASE + HW_SYS_TSVAR_SIZE)
#define HW_SYS_BIFROST_END              (HW_SYS_SYSCOM_BASE + HW_SYS_SYSCOM_SIZE)

//
// Enum: HW_HEAP_TYPE
//
// HW_HEAP_TYPE_DRAM - Target DRAM allocation block
// HW_HEAP_TYPE_DRAM_PROTECTED - Target first 16 MB of DRAM which is has protected content restrictions
// HW_HEAP_TYPE_SRAM0 - Target SRAM0 allocation block
// HW_HEAP_TYPE_SRAM1 - Target SRAM1 allocation block
// HW_HEAP_TYPE_SRAM2 - Target SRAM2 allocation block
// HW_HEAP_TYPE_TCM_CUR_CORE - Target allocation block for the current core's TCM
// HW_HEAP_TYPE_TCM_SN[X]_SFP_[Y] - Target the allocation block for the TCM [Y] of SFP node [X]. Valid [X]: 0-2. Valid [Y]: 0-1.
// HW_HEAP_TYPE_TCM_SN[X]_VFP_[Y] - Target the allocation block for the TCM [Y] of VFP node [X]. Valid [X]: 3-4. Valid [Y]: 0-1.
// HW_HEAP_TYPE_HOSTMEM - Target the host memory allocation block
// HW_HEAP_TYPE_DEFAULT - Target the default allocation block--SRAM0 in BASRAM_ONLY mode and DRAM otherwise
// HW_HEAP_TYPE_INVALID - Returned as an error from some functions
//
// Ranging values:
// HW_HEAP_TYPE_CNT - Number of allocation blocks
// HW_HEAP_TYPE_TCM_SFP_BEGIN - Index of first SFP TCM
// HW_HEAP_TYPE_TCM_VFP_BEGIN - index of first VFP TCM
// HW_HEAP_TYPE_TCM_END - Index of last TCM
//
typedef enum{
    HW_HEAP_TYPE_DRAM = 0,
    HW_HEAP_TYPE_DRAM_PROTECTED,
    HW_HEAP_TYPE_SRAM0,
    HW_HEAP_TYPE_SRAM1,
    HW_HEAP_TYPE_SRAM2,
    HW_HEAP_TYPE_TCM_CUR_CORE,

    // Autogenerated TCM heap types, e.g.:
    //HW_HEAP_TYPE_TCM_SN0_SFP_0,
    //HW_HEAP_TYPE_TCM_SN0_SFP_1,
    //HW_HEAP_TYPE_TCM_SN7_VFP_0,
    //HW_HEAP_TYPE_TCM_SN7_VFP_1,
    HW_HEAP_TYPE_AUTO,

    HW_HEAP_TYPE_HOSTMEM,
    HW_HEAP_TYPE_CNT,
    HW_HEAP_TYPE_DEFAULT = -2,
    HW_HEAP_TYPE_INVALID = -1
} HW_HEAP_TYPE;

//
// TCM block in a super node
//

typedef enum{
    HW_SN_TCM_0,
    HW_SN_TCM_1,
    HW_SN_TCM_CNT
}HW_SN_TCM_BLOCK;

typedef enum{
    HW_HEAP_BLOCK_DRAM = 0,
    HW_HEAP_BLOCK_DRAM_PROTECTED,
    HW_HEAP_BLOCK_SRAM0,
    HW_HEAP_BLOCK_SRAM1,
    HW_HEAP_BLOCK_SRAM2,

    // Autogenerated TCM heap blocks, e.g.:
    //HW_HEAP_BLOCK_TCM_SN0_SFP,
    //HW_HEAP_BLOCK_TCM_SN7_VFP_0,
    //HW_HEAP_BLOCK_TCM_SN7_VFP_1,
    HW_HEAP_BLOCK_AUTO,

    HW_HEAP_BLOCK_HOSTMEM,
    HW_HEAP_BLOCK_CNT,
    HW_HEAP_BLOCK_INVALID = -1
}HW_HEAP_BLOCK;


// Defines for placing variables into a specific memory region

// In BASRAM_ONLY mode put DDR placements into BaSRAM instead
#if defined(BASRAM_ONLY)
#define MEM_DDR_WB          __attribute__ ((section (".sram0_wb.data")))
#define MEM_DDR_UC          __attribute__ ((section (".sram0_uc.data")))
#else
#define MEM_DDR_WB          __attribute__ ((section (".ddr_wb.data")))
#define MEM_DDR_UC          __attribute__ ((section (".ddr_uc")))
#endif
#define MEM_SRAM0_WB        __attribute__ ((section (".sram0_wb.data")))
#define MEM_SRAM0_UC        __attribute__ ((section (".sram0_uc.data")))
#define MEM_SRAM1_WB        __attribute__ ((section (".sram1_wb.data")))
#define MEM_SRAM1_UC        __attribute__ ((section (".sram1_uc.data")))
#define MEM_SRAM2_WB        __attribute__ ((section (".sram2_wb.data")))
#define MEM_SRAM2_UC        __attribute__ ((section (".sram2_uc.data")))
// For compatibility with old code
#define MEM_SRAM_WB         MEM_SRAM0_WB
#define MEM_SRAM_UC         MEM_SRAM0_UC

// DRAM
#define HW_HEAP_DRAM_BASE               (0x4C000000u)
#define HW_HEAP_DRAM_SIZE               (0x04000000u * 21)
// For reservation
#define HW_DRAM_UNCACHED_RANK1_BASE     (0xE0000000)
#define HW_DRAM_UNCACHED_RANK1_SIZE     (0x20000000)

//#ifdef DDR_2_RANKS
#ifndef USE_512M_DRAM
#define HW_DRAM_RESERVE_RANK1_SIZE      (0x00000000)
#else
#define HW_DRAM_RESERVE_RANK1_SIZE      (0x20000000)
#endif
#define HW_DRAM_RESERVE_LOG_BUF_SIZE    (0x01000000)

#define HW_DRAM_POST_BUF_BASE           (HW_DRAM_UNCACHED_RANK1_BASE - HW_DRAM_RESERVE_RANK1_SIZE + HW_DRAM_UNCACHED_RANK1_SIZE - HW_DRAM_RESERVE_LOG_BUF_SIZE)
#ifdef PAGE_ADDR_EMU_MODEL
#define HW_DRAM_POST_BUF_SIZE           (0x00002000)
#else
#define HW_DRAM_POST_BUF_SIZE           (0x00008000)
#endif
#define HW_DRAM_PRINT_BUF_BASE          (HW_DRAM_POST_BUF_BASE + HW_DRAM_POST_BUF_SIZE)
#define HW_DRAM_PRINT_BUF_SIZE          (HW_DRAM_RESERVE_LOG_BUF_SIZE - HW_DRAM_POST_BUF_SIZE)

#define HW_DRAM_RESERVE_SIZE            (HW_DRAM_RESERVE_RANK1_SIZE + HW_DRAM_RESERVE_LOG_BUF_SIZE)
#define HW_HEAP_DRAM_AVAIL_SIZE         (HW_HEAP_DRAM_SIZE - HW_DRAM_RESERVE_SIZE)


// SRAM
#define HW_SRAM_CACHE_MASK              (0x20000000)

// TCM
#define HW_SYS_NODE_BASE                (0x02200000)
#define HW_SYS_NODE_SIZE                (0x00200000)
#define HW_HEAP_TCM_OFFSET_0            (0x00080000)
#define HW_HEAP_TCM_OFFSET_1            (0x00100000)
#define HW_HEAP_TCM_OFFSET_DISTANCE     (0x00080000)
#define HW_HEAP_TCM_SIZE_VFP            (0x00020000)
#define HW_HEAP_TCM_SIZE_SFP            (0x00080000)

//HOSTMEM
#define HW_HOSTMEM_CACHE_MASK           (0x20000000)

// TODO: Base and size do not currently match chip address
// map, because the first 17 MB are reserved for the PCIE BFM.
#define HW_HEAP_HOSTMEM_BASE            (0x3F100000)
#define HW_HEAP_HOSTMEM_SIZE            (0x00F00000)

#define HW_HEAP_HOSTMEM_CHIP_PLAT_BASE  (0x60000000)
#define HW_HEAP_HOSTMEM_CHIP_PLAT_SIZE  (0x01000000)


//For addr translation
#define HW_ADDR_DRAM_CACHED_BASE        (0x40000000)
#define HW_ADDR_DRAM_UNCACHED_BASE      (0xA0000000)
#define HW_ADDR_DRAM_SIZE               (0x5FFFFFFF)

#define HW_ADDR_SRAM0_CACHED_BASE       (0x20100000)
#define HW_ADDR_SRAM0_UNCACHED_BASE     (0x00100000)
#define HW_ADDR_SRAM0_OFFSET_MASK       (0x000FFFFF)
#define HW_ADDR_SRAM1_CACHED_BASE       (0x20300000)
#define HW_ADDR_SRAM1_UNCACHED_BASE     (0x00300000)
#define HW_ADDR_SRAM1_OFFSET_MASK       (0x000FFFFF)
#define HW_ADDR_SRAM2_CACHED_BASE       (0x20500000)
#define HW_ADDR_SRAM2_UNCACHED_BASE     (0x00500000)
#define HW_ADDR_SRAM2_OFFSET_MASK       (0x000FFFFF)

#define HW_ADDR_HOSTMEM_UNCACHED_BASE   (0x1E000000)
#define HW_ADDR_HOSTMEM_CACHED_BASE     (0x3E000000)
#define HW_ADDR_HOSTMEM_OFFSET_MASK     (0x01FFFFFF)

#define HW_ADDR_NODE_LOCAL_BASE         (0x02000000)
#define HW_ADDR_NODE_LOCAL_OFFSET_MASK  (0x001FFFFF)


#endif // _BIFROST_SYSTEM_CONSTANTS_H

