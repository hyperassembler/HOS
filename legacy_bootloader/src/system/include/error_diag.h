/*-------------------------------------------------------
 |
 |    error_diag.h
 |
 |    header file for enums related to logging fabric errors
 |
 |--------------------------------------------------------
 |
 |      Copyright ( C ) 2014  Microsoft Corp.
 |      All Rights Reserved
 |      Confidential and Proprietary
 |
 |--------------------------------------------------------
 */
 
typedef enum
{
    OPC_READ = 0x0,
    OPC_WRAPPED_READ,
    OPC_LINKED_READ,
    OPC_EXCLUSIVE_READ,
    OPC_WRITE,
    OPC_WRAPPED_WRITE,
    OPC_CONDITIONAL_WRITE,
}ERRLOG0_OPC;

typedef enum
{
    SLV = 0,
    DEC,
    UNS,
    DISC,
    SEC,
    HIDE,
    TMO,
    RSV,
}ERRLOG0_ERRCODE;

typedef enum
{
    IA_AIO = 0,
    IA_CDT,
    IA_CFPU,
    IA_DNN_RD0,
    IA_DNN_WR0,
    IA_DNN_WR1,
    IA_IMP0_NP,
    IA_IMP0_P,
    IA_IMP1_NP,
    IA_IMP1_P,
    IA_IODMA0,
    IA_IODMA1,
    IA_IODMA2,
    IA_IODMA3,
    IA_IODMA4,
    IA_IODMA5,
    IA_JBL_RD,
    IA_JBL_WR,
    IA_JTAG,
    IA_LSR0,
    IA_LSR1,
    IA_MIP0,
    IA_MIP1,
    IA_MIP2,
    IA_MIP3,
    IA_MIP4,
    IA_MIP5,
    IA_MIP6,
    IA_NODE00,
    IA_NODE01,
    IA_NODE02,
    IA_NODE03,
    IA_NODE04,
    IA_NODE05,
    IA_NODE06,
    IA_NODE07,
    IA_NODE08,
    IA_NODE09,
    IA_NODE10,
    IA_NODE11,
    IA_NODE12,
    IA_PCIEC,
    IA_TIP,
}ERRLOG1_INITFLOW;

typedef enum
{
    TA_CDT = 0,
    TA_GPIO0,
    TA_GPIO1,
    TA_GPIO10,
    TA_GPIO11,
    TA_GPIO12,
    TA_GPIO13,
    TA_GPIO14,
    TA_GPIO15,
    TA_GPIO16,
    TA_GPIO17,
    TA_GPIO18,
    TA_GPIO19,
    TA_GPIO2,
    TA_GPIO3,
    TA_GPIO4,
    TA_GPIO5,
    TA_GPIO6,
    TA_GPIO7,
    TA_GPIO8,
    TA_GPIO9,
    TA_CSIM0 = 0x20,
    TA_CSIM1,
    TA_CSIM2,
    TA_CSIM3,
    TA_CSIM4,
    TA_CSIM5,
    TA_CSIM6,
    TA_CSIT,
    TA_MIP0,
    TA_MIP1,
    TA_MIP2,
    TA_MIP3,
    TA_MIP4,
    TA_MIP5,
    TA_MIP6,
    TA_TIP,
    TA_I2C0,
    TA_I2C1,
    TA_I2C12,
    TA_I2C13,
    TA_I2C14,
    TA_I2C2,
    TA_I2C6,
    TA_I2C7,
    TA_I2C8,
    TA_JTM1,
    TA_PSRO1,
    TA_WDT,
    TA_I2C10 = 0x40,
    TA_I2C11,
    TA_I2C15,
    TA_I2C3,
    TA_I2C4,
    TA_I2C5,
    TA_I2C9,
    TA_JTM0,
    TA_PSRO0,
    TA_UART0,
    TA_UART1,
    TA_CFPU = 0x4C,
    TA_CFPUSRAM,
    TA_FM_BASRAM0,
    TA_FM_BASRAM2,
    TA_DSIRX0,
    TA_DSIRX1,
    TA_IMP0,
    TA_IMP1,
    TA_DSITX0,
    TA_DSITX1,
    TA_LSR0,
    TA_LSR1,
    TA_AIO,
    TA_SPI0,
    TA_SPI1,
    TA_SPI2,
    TA_SPI3,
    TA_SPI4,
    TA_SPI5,
    TA_TCON,
    TA_DNN,
    TA_DNNDMA,
    TA_FM_BASRAM1,    
    TA_FM_MCU0 = 0x64,
    TA_MCU0,
    TA_SERVICE_MCU0,
    TA_FM_MCU1 = 0x68,    
    TA_MCU1,    
    TA_SERVICE_MCU1,    
    TA_JTM2 = 0x6C,    
    TA_PCIEPHY,
    TA_BASRAM0,
    TA_BASRAM1,
    TA_BASRAM2,
    TA_BOOTROM,
    TA_CLSRAM,
    TA_FM_PCIE,
    TA_INTC,
    TA_IODMA0,
    TA_IODMA1,
    TA_IODMA2,
    TA_IODMA3,
    TA_IODMA4,
    TA_IODMA5,
    TA_JBL,
    TA_MC0Q0,
    TA_MC0Q1,
    TA_MC0Q10,
    TA_MC0Q11,
    TA_MC0Q2,
    TA_MC0Q3,
    TA_MC0Q4,
    TA_MC0Q5,
    TA_MC0Q6,
    TA_MC0Q7,
    TA_MC0Q8,
    TA_MC0Q9,
    TA_MC1Q0,
    TA_MC1Q1,
    TA_MC1Q10,
    TA_MC1Q11,
    TA_MC1Q2,
    TA_MC1Q3,
    TA_MC1Q4,
    TA_MC1Q5,
    TA_MC1Q6,
    TA_MC1Q7,
    TA_MC1Q8,
    TA_MC1Q9,
    TA_NODE00,
    TA_NODE01,
    TA_NODE02,
    TA_NODE03,
    TA_NODE04,
    TA_NODE05,
    TA_NODE06,
    TA_NODE07,
    TA_NODE08,
    TA_NODE09,
    TA_NODE10,
    TA_NODE11,
    TA_NODE12,
    TA_PCIEC,
    TA_PCIEEP,
    TA_SASRAM,
    TA_SERVICE,
    TA_SERVICE_PROT,
}ERRLOG1_TARGETFLOW;

union ERRORLOG1
{
    struct
    {
        UINT32 seqID : 5;
        UINT32 targetSubRange : 5;
        UINT32 targetFlow : 8;
        UINT32 initFlow : 6;
        UINT32 reserved: 8;
    };
    UINT32 regVal;
} __attribute__ ((packed));
