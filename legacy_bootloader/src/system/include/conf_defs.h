// Autogenerated by conf2mk.py

// This file MUST BE REGENERATED if a config change has
// altered the number of cores by doing:
// 'make iss/hup_chip.conf_defs'
// 'cp out/sim/<tool>/iss/hup_chip/conf_defs.h <this file>'

#ifndef _CONF_DEFS_H
#define _CONF_DEFS_H

// Helper for initializing arrays with HW_PROC_CNT elements
#define PROC_CNT_INITIALIZER(text) {text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, }

// Enums for nodes and cores
typedef enum
{
HW_SN0_SFP,
HW_SN1_SFP,
HW_SN2_SFP,
HW_SN3_SFP,
HW_SN4_SFP,
HW_SN5_SFP,
HW_SN6_SFP,
HW_SN7_VFP,
HW_SN8_VFP,
HW_SN9_VFP,
HW_SN10_VFP,
HW_SN11_VFP,
HW_SN12_VFP,
HW_SN_CNT,
HW_SN_SFP_BEGIN = HW_SN0_SFP,
HW_SN_VFP_BEGIN = HW_SN7_VFP,
HW_SN_CURRENT
} HW_SN;

#define HW_SFP_SUPERNODE_CNT (7)
#define HW_VFP_SUPERNODE_CNT (6)
#define HW_SUPERNODE_CNT (13)

typedef enum
{
HW_CORE_SN0_SFP0,
HW_CORE_SN0_SFP1,
HW_CORE_SN1_SFP0,
HW_CORE_SN1_SFP1,
HW_CORE_SN2_SFP0,
HW_CORE_SN2_SFP1,
HW_CORE_SN3_SFP0,
HW_CORE_SN3_SFP1,
HW_CORE_SN4_SFP0,
HW_CORE_SN4_SFP1,
HW_CORE_SN5_SFP0,
HW_CORE_SN5_SFP1,
HW_CORE_SN6_SFP0,
HW_CORE_SN6_SFP1,
HW_CORE_SN7_VFP0,
HW_CORE_SN7_VFP1,
HW_CORE_SN8_VFP0,
HW_CORE_SN8_VFP1,
HW_CORE_SN9_VFP0,
HW_CORE_SN9_VFP1,
HW_CORE_SN10_VFP0,
HW_CORE_SN10_VFP1,
HW_CORE_SN11_VFP0,
HW_CORE_SN11_VFP1,
HW_CORE_SN12_VFP0,
HW_CORE_SN12_VFP1,
HW_PROC_CNT,
HW_CORE_CURRENT,
HW_CORE_SFP_BEGIN = HW_CORE_SN0_SFP0,
HW_CORE_SFP_END = HW_CORE_SN6_SFP1 + 1,
HW_CORE_VFP_BEGIN = HW_CORE_SN7_VFP0,
HW_CORE_VFP_END = HW_CORE_SN12_VFP1 + 1,
HW_CORE_DEFAULT = 0xDEADBEEF
} HW_CORE;

// Core-to-supernode mapping
static unsigned int HW_SUPERNODE_MAPPING[] = {
0,
0,
1,
1,
2,
2,
3,
3,
4,
4,
5,
5,
6,
6,
7,
7,
8,
8,
9,
9,
10,
10,
11,
11,
12,
12,
};

// Core-to-supernode mapping
static unsigned int HW_SUPERNODE_CORE_BASES[] = {
0,
2,
4,
6,
8,
10,
12,
14,
16,
18,
20,
22,
24,
};

// Core-to-supernode mapping
static unsigned int HW_SUPERNODE_CORE_COUNTS[] = {
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
};

// Node masks
#define HW_NODE_MASK_AUTO \
HW_NODE_MASK_SFP0 = 0x1, \
HW_NODE_MASK_SFP1 = 0x2, \
HW_NODE_MASK_SFP2 = 0x4, \
HW_NODE_MASK_SFP3 = 0x8, \
HW_NODE_MASK_SFP4 = 0x10, \
HW_NODE_MASK_SFP5 = 0x20, \
HW_NODE_MASK_SFP6 = 0x40, \
HW_NODE_MASK_VFP0 = 0x80, \
HW_NODE_MASK_VFP1 = 0x100, \
HW_NODE_MASK_VFP2 = 0x200, \
HW_NODE_MASK_VFP3 = 0x400, \
HW_NODE_MASK_VFP4 = 0x800, \
HW_NODE_MASK_VFP5 = 0x1000

// Heap types
#define HW_HEAP_TYPE_AUTO \
HW_HEAP_TYPE_TCM_SN0_SFP_0, \
HW_HEAP_TYPE_TCM_SN0_SFP_1, \
HW_HEAP_TYPE_TCM_SN1_SFP_0, \
HW_HEAP_TYPE_TCM_SN1_SFP_1, \
HW_HEAP_TYPE_TCM_SN2_SFP_0, \
HW_HEAP_TYPE_TCM_SN2_SFP_1, \
HW_HEAP_TYPE_TCM_SN3_SFP_0, \
HW_HEAP_TYPE_TCM_SN3_SFP_1, \
HW_HEAP_TYPE_TCM_SN4_SFP_0, \
HW_HEAP_TYPE_TCM_SN4_SFP_1, \
HW_HEAP_TYPE_TCM_SN5_SFP_0, \
HW_HEAP_TYPE_TCM_SN5_SFP_1, \
HW_HEAP_TYPE_TCM_SN6_SFP_0, \
HW_HEAP_TYPE_TCM_SN6_SFP_1, \
HW_HEAP_TYPE_TCM_SN7_VFP_0, \
HW_HEAP_TYPE_TCM_SN7_VFP_1, \
HW_HEAP_TYPE_TCM_SN8_VFP_0, \
HW_HEAP_TYPE_TCM_SN8_VFP_1, \
HW_HEAP_TYPE_TCM_SN9_VFP_0, \
HW_HEAP_TYPE_TCM_SN9_VFP_1, \
HW_HEAP_TYPE_TCM_SN10_VFP_0, \
HW_HEAP_TYPE_TCM_SN10_VFP_1, \
HW_HEAP_TYPE_TCM_SN11_VFP_0, \
HW_HEAP_TYPE_TCM_SN11_VFP_1, \
HW_HEAP_TYPE_TCM_SN12_VFP_0, \
HW_HEAP_TYPE_TCM_SN12_VFP_1
#define HW_HEAP_TYPE_TCM_SFP_BEGIN (HW_HEAP_TYPE_TCM_SN0_SFP_0)
#define HW_HEAP_TYPE_TCM_SFP_END (HW_HEAP_TYPE_TCM_SN6_SFP_1)
#define HW_HEAP_TYPE_TCM_VFP_BEGIN (HW_HEAP_TYPE_TCM_SN7_VFP_0)
#define HW_HEAP_TYPE_TCM_VFP_END (HW_HEAP_TYPE_TCM_SN12_VFP_1)
#define HW_HEAP_TYPE_TCM_BEGIN (HW_HEAP_TYPE_TCM_SN0_SFP_0)
#define HW_HEAP_TYPE_TCM_END (HW_HEAP_TYPE_TCM_SN12_VFP_1)

// Heap blocks
#define HW_HEAP_BLOCK_AUTO \
HW_HEAP_BLOCK_TCM_SN0_SFP, \
HW_HEAP_BLOCK_TCM_SN1_SFP, \
HW_HEAP_BLOCK_TCM_SN2_SFP, \
HW_HEAP_BLOCK_TCM_SN3_SFP, \
HW_HEAP_BLOCK_TCM_SN4_SFP, \
HW_HEAP_BLOCK_TCM_SN5_SFP, \
HW_HEAP_BLOCK_TCM_SN6_SFP, \
HW_HEAP_BLOCK_TCM_SN7_VFP_0, \
HW_HEAP_BLOCK_TCM_SN7_VFP_1, \
HW_HEAP_BLOCK_TCM_SN8_VFP_0, \
HW_HEAP_BLOCK_TCM_SN8_VFP_1, \
HW_HEAP_BLOCK_TCM_SN9_VFP_0, \
HW_HEAP_BLOCK_TCM_SN9_VFP_1, \
HW_HEAP_BLOCK_TCM_SN10_VFP_0, \
HW_HEAP_BLOCK_TCM_SN10_VFP_1, \
HW_HEAP_BLOCK_TCM_SN11_VFP_0, \
HW_HEAP_BLOCK_TCM_SN11_VFP_1, \
HW_HEAP_BLOCK_TCM_SN12_VFP_0, \
HW_HEAP_BLOCK_TCM_SN12_VFP_1
#define HW_HEAP_BLOCK_TCM_SFP_BEGIN (HW_HEAP_BLOCK_TCM_SN0_SFP)
#define HW_HEAP_BLOCK_TCM_SFP_END (HW_HEAP_BLOCK_TCM_SN6_SFP)
#define HW_HEAP_BLOCK_TCM_VFP_BEGIN (HW_HEAP_BLOCK_TCM_SN7_VFP_0)
#define HW_HEAP_BLOCK_TCM_VFP_END (HW_HEAP_BLOCK_TCM_SN12_VFP_1)
#define HW_HEAP_BLOCK_TCM_BEGIN (HW_HEAP_BLOCK_TCM_SN0_SFP)
#define HW_HEAP_BLOCK_TCM_END (HW_HEAP_BLOCK_TCM_SN12_VFP_1)

// Defines for memory types
#define MEM_TCM_NODE0_SFP __attribute__ ((section (".tcm_node0_sfp.data")))
#define MEM_TCM_NODE1_SFP __attribute__ ((section (".tcm_node1_sfp.data")))
#define MEM_TCM_NODE2_SFP __attribute__ ((section (".tcm_node2_sfp.data")))
#define MEM_TCM_NODE3_SFP __attribute__ ((section (".tcm_node3_sfp.data")))
#define MEM_TCM_NODE4_SFP __attribute__ ((section (".tcm_node4_sfp.data")))
#define MEM_TCM_NODE5_SFP __attribute__ ((section (".tcm_node5_sfp.data")))
#define MEM_TCM_NODE6_SFP __attribute__ ((section (".tcm_node6_sfp.data")))
#define MEM_TCM_NODE7_VFP0 __attribute__ ((section (".tcm_node7_vfp0.data")))
#define MEM_TCM_NODE7_VFP1 __attribute__ ((section (".tcm_node7_vfp1.data")))
#define MEM_TCM_NODE8_VFP0 __attribute__ ((section (".tcm_node8_vfp0.data")))
#define MEM_TCM_NODE8_VFP1 __attribute__ ((section (".tcm_node8_vfp1.data")))
#define MEM_TCM_NODE9_VFP0 __attribute__ ((section (".tcm_node9_vfp0.data")))
#define MEM_TCM_NODE9_VFP1 __attribute__ ((section (".tcm_node9_vfp1.data")))
#define MEM_TCM_NODE10_VFP0 __attribute__ ((section (".tcm_node10_vfp0.data")))
#define MEM_TCM_NODE10_VFP1 __attribute__ ((section (".tcm_node10_vfp1.data")))
#define MEM_TCM_NODE11_VFP0 __attribute__ ((section (".tcm_node11_vfp0.data")))
#define MEM_TCM_NODE11_VFP1 __attribute__ ((section (".tcm_node11_vfp1.data")))
#define MEM_TCM_NODE12_VFP0 __attribute__ ((section (".tcm_node12_vfp0.data")))
#define MEM_TCM_NODE12_VFP1 __attribute__ ((section (".tcm_node12_vfp1.data")))

#endif // _CONF_DEFS_H

